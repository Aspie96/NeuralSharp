/*
    (C) 2018 Valentino Giudice

    This software is provided 'as-is', without any express or implied
    warranty. In no event will the authors be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.
    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.
    3. This notice may not be removed or altered from any source distribution.
*/

using System;
using System.Runtime.Serialization;

namespace NeuralNetwork.Convolutional
{
    /// <summary>Represents a kernel in a convolutional layer.</summary>
    [DataContract]
    public struct Kernel : ICloneable
    {
        [DataMember]
        private int depth;
        [DataMember]
        private int side;
        private float[,,] filter;   // [depth, width, height]
        private float[,,] deltas;   // [depth, width, height]
        private float[] flatFilter;
        private int stride;
        private int padding;

        /// <summary>Creates an instance of the <code>Kernel</code> struct.</summary>
        /// <param name="depth">The depth of the input image.</param>
        /// <param name="side">The length of the side of the kernel.</param>
        /// <param name="stride">The stride to be used by the kernel.</param>
        /// <param name="padding"><code>true</code> if zero padding is to be used by the kernel, <code>false</code> if valid padding is to be used.</param>
        public Kernel(int depth, int side, int stride, bool padding)
        {
            this.depth = depth;
            this.side = side;
            this.filter = new float[depth, side, side];
            this.deltas = new float[depth, side, side];
            this.flatFilter = null;
            this.stride = stride;
            this.padding = (padding ? (side - 1) / 2 : 0);
            for (int i = 0; i < this.Depth; i++)
            {
                for (int j = 0; j < this.Side; j++)
                {
                    for (int k = 0; k < this.Side; k++)
                    {
                        this.Filter[i, j, k] = (float)RandomGenerator.GetNormalNumber(2.0 / (this.Side * this.Side * this.Depth));
                    }
                }
            }
        }

        [DataMember]
        private float[] FlatFilter
        {
            get
            {
                float[] retVal = new float[this.filter.Length];
                Buffer.BlockCopy(this.filter, 0, retVal, 0, sizeof(float) * this.filter.Length);
                return retVal;
            }
            set { this.flatFilter = value; }
        }

        /// <summary>The depth of this kernel.</summary>
        public int Depth
        {
            get { return this.depth; }
        }

        /// <summary>The lenght of the side of this kernel.</summary>
        public int Side
        {
            get { return this.side; }
        }

        /// <summary>The content of this kernel.</summary>
        public float[,,] Filter
        {
            get { return this.filter; }
        }

        private static float Relu(float input)
        {
            return Math.Max(0.0F, input);
        }

        private static float ReluDeriv(float output)
        {
            if (output <= 0.0F)
            {
                return 0.0F;
            }
            return 1.0F;
        }
        
        /// <summary>Applies this kernel to an image, in a certain position.</summary>
        /// <param name="input">The input image to be applied this kernel to.</param>
        /// <param name="x">The X positon to be applied the kernel to.</param>
        /// <param name="y">The Y position to be applied the kernel to.</param>
        /// <returns>The value generated by the kernel.</returns>
        public float Apply(Image input, int x, int y)
        {
            float retVal = 0;
            for (int j = 0; j < this.Side; j++)
            {
                for (int k = 0; k < this.Side; k++)
                {
                    int inputX = (x + j) * this.stride - this.padding;
                    int inputY = (y + k) * this.stride - this.padding;
                    if (0 <= inputX && inputX < input.Width && 0 <= inputY && inputY < input.Height)
                    {
                        for (int i = 0; i < this.Depth; i++)
                        {
                            retVal += this.filter[i, j, k] * input.Raw[i, inputX, inputY];
                        }
                    }
                }
            }
            retVal = Relu(retVal);
            return retVal;
        }

        /// <summary>Applies the current kernel.</summary>
        /// <param name="input">The image to be applied the kernel to.</param>
        /// <param name="output">The image to be written the output into.</param>
        /// <param name="layer">The index of the layer of the output image to be written the output into.</param>
        public void Apply(Image input, Image output, int layer)
        {
            for (int i = 0; i < output.Width; i++)
            {
                for (int j = 0; j < output.Height; j++)
                {
                    output.Raw[layer, i, j] = this.Apply(input, i, j);
                }
            }
        }

        private void BackPropagateFunc(Image input, Image error1, float err, int x, int y)
        {
            for (int i = 0; i < this.Depth; i++)
            {
                for (int j = 0; j < this.Side; j++)
                {
                    for (int k = 0; k < this.Side; k++)
                    {
                        error1.Raw[i, x + j, y + k] += this.Filter[i, j, k] * err;
                        this.deltas[i, j, k] += input.Raw[i, x + j, y + k] * err;
                    }
                }
            }
        }

        /// <summary>Backpropagates the given error trough this kernel, updating its weights.</summary>
        /// <param name="input">The input image.</param>
        /// <param name="output">The output image.</param>
        /// <param name="error2">The error of the output. It must refer to the latest feeding process.</param>
        /// <param name="error1">The image to be written the error of the input into.</param>
        /// <param name="layer">The layer of the output image the output was written into.</param>
        /// <param name="rate">The learing reate at which the weights are to be updated.</param>
        public void BackPropagate(Image input, Image output, Image error2, Image error1, int layer, float rate)
        {
            for (int i = 0; i < output.Width; i++)
            {
                for (int j = 0; j < output.Height; j++)
                {
                    float err = error2.Raw[layer, i, j] * Kernel.ReluDeriv(output.Raw[layer, i, j]);
                    if (err != 0.0F)
                    {
                        this.BackPropagateFunc(input, error1, err, i, j);
                    }
                }
            }
            if (rate != 0.0F)
            {
                for (int i = 0; i < this.Depth; i++)
                {
                    for (int j = 0; j < this.Side; j++)
                    {
                        for (int k = 0; k < this.Side; k++)
                        {
                            this.Filter[i, j, k] += rate * this.deltas[i, j, k];
                            if (Math.Abs(this.deltas[i, j, k]) > 0.1)
                            {

                            }
                            this.deltas[i, j, k] = 0.0F;
                        }
                    }
                }
            }
        }

        [OnDeserialized]
        private void SetValuesOnDeserialized(StreamingContext context)
        {
            this.filter = new float[this.Depth, this.Side, this.Side];
            Buffer.BlockCopy(this.flatFilter, 0, this.Filter, 0, sizeof(float) * this.Filter.Length);
            this.deltas = new float[this.Depth, this.Side, this.Side];
            this.FlatFilter = null;
        }
        
        /// <summary>Creates a copy of this instance of <code>Kernel</code>.</summary>
        /// <returns>The generated copy of this instance of <code>Kernel</code>.</returns>
        public object Clone()
        {
            Kernel retVal = new Kernel();
            retVal.depth = this.Depth;
            retVal.side = this.Side;
            retVal.filter = (float[,,])this.Filter.Clone();
            retVal.deltas = new float[this.Depth, this.Side, this.Side];
            retVal.flatFilter = null;
            return retVal;
        }
    }
}
